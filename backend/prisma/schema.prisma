// Prisma schema for Malaysian Contractors Hub
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        UserRole @default(CONTRACTOR)
  company     String?
  phone       String?
  address     String?
  licenseNo   String?
  licenseType String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects         Project[]
  notifications    Notification[]
  messages         Message[]
  complianceChecks ComplianceCheck[]
  calculations     Calculation[]
  refreshTokens    RefreshToken[]
  assignedTasks    Task[]         @relation("AssignedTasks")
  createdTasks     Task[]         @relation("CreatedTasks")
  projectTeams     ProjectTeam[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Project Management
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  location    String
  client      String
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  calculations      Calculation[]
  complianceChecks  ComplianceCheck[]
  documents         Document[]
  projectModules    ProjectModule[]
  tasks             Task[]
  projectTeams      ProjectTeam[]

  @@map("projects")
}

model ProjectModule {
  id        String   @id @default(cuid())
  projectId String
  moduleType ModuleType
  status    ModuleStatus @default(PENDING)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_modules")
}

model Task {
  id          String     @id @default(cuid())
  projectId   String
  title       String
  description String?
  assignedToId String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo User?   @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)
  createdBy  User    @relation("CreatedTasks", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model ProjectTeam {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      TeamRole    @default(MEMBER)
  joinedAt  DateTime    @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_teams")
}

// Civil Engineering Module
model Calculation {
  id          String   @id @default(cuid())
  userId      String
  projectId   String?
  moduleType  ModuleType
  inputData   Json
  resultData  Json
  createdAt   DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("calculations")
}

// Compliance Management
model ComplianceCheck {
  id            String   @id @default(cuid())
  userId        String
  projectId     String?
  standardCode  String
  standardName  String
  category      String
  status        ComplianceStatus @default(PENDING)
  findings      Json?
  recommendations Json?
  checkedAt     DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("compliance_checks")
}

model Standard {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  category    String
  description String?
  requirements Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("standards")
}

// Document Management
model Document {
  id           String   @id @default(cuid())
  name         String
  description  String?
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  projectId    String
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy User    @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Notification System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Messaging System
model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  subject    String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  sender   User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation(fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Marketplace
model Service {
  id          String   @id @default(cuid())
  providerId  String
  title       String
  description String
  category    String
  price       Float?
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  provider User @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contact     String
  email       String?
  phone       String?
  address     String?
  category    String
  rating      Float    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("suppliers")
}

// Weather Data (for monsoon risk planning)
model WeatherData {
  id          String   @id @default(cuid())
  location    String
  date        DateTime
  temperature Float?
  humidity    Float?
  rainfall    Float?
  windSpeed   Float?
  pressure    Float?
  createdAt   DateTime @default(now())

  @@unique([location, date])
  @@map("weather_data")
}

// Material Alerts
model MaterialAlert {
  id          String   @id @default(cuid())
  material    String
  location    String
  alertType   String
  severity    AlertSeverity
  message     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?

  @@map("material_alerts")
}

// Enums
enum UserRole {
  ADMIN
  CONTRACTOR
  CONSULTANT
  SUPPLIER
  CLIENT
}

enum ProjectStatus {
  PLANNING
  DESIGN
  CONSTRUCTION
  COMPLETION
  MAINTENANCE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamRole {
  OWNER
  MANAGER
  MEMBER
}

enum ModuleType {
  CIVIL_ENGINEERING
  ELECTRICAL_SYSTEMS
  ACMV_HVAC
  SEWERAGE_DRAINAGE
  ELV_AUTOMATION
  BUILDING_AUTOMATION
}

enum ModuleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum ComplianceStatus {
  PENDING
  COMPLIANT
  NON_COMPLIANT
  REQUIRES_REVIEW
}

enum NotificationType {
  INFO
  WARNING
  ALERT
  SUCCESS
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
